@page "/Publisher"
@using LiteDB;
@using Windows.Storage.Pickers;
@inject NavigationManager NavigationManager;
<h3>Publisher</h3>
<button class="btn btn-primary" @onclick="Back">
   {-- Back
</button>
<div style="width:30%;">

  <form @onsubmit="EditorPublisher.SaveInfo">
    
    <label for="GameName">Game Name:</label>
    <input id="GameName" class="@modFormUser" @bind-value="EditorPublisher.infoClass.GameName" />
  
  </form>
  
  <form @onsubmit="EditorPublisher.SaveInfo">
    <label for="Discription">Discription:</label>
    <input id="Discription" class="@modFormUser" @bind-value="EditorPublisher.infoClass.Discription" />
  </form>
  
  <form @onsubmit="EditorPublisher.SaveInfo">
  
   <label for="media">Media Url (Use symbol ';' for separate):</label>
   <input id="media" class="@modFormUser" @bind-value="EditorPublisher.infoClass.Media" />
  
  </form>
  
  <form @onsubmit="EditorPublisher.SaveInfo">
  
   <label for="tags">Tags (Use symbol ';' for separate):</label>
   <input id="tags" class="@modFormUser" @bind-value="EditorPublisher.infoClass.Tags" />
  
  </form>

</div>
<div class="dropzone rounded" @onclick="UploadImage3_2">
    @if (Image300_200!= null)
    {
        MemoryStream ms = new MemoryStream();
        Image300_200.CopyTo(ms);
        byte[] byteArray = ms.ToArray();
        var b64String = Convert.ToBase64String(byteArray);
        string image = "data:image/png;base64," + b64String;
        <img src="@image">
    }
    else{
        <div>
        Upload Image 300x200
        </div>
    }
</div>
<button class="btn btn-primary" @onclick="MakeGamePack">
    Make GamePack
</button>
@code {
    string modFormUser = "form-control modified invalid";
    string dropClass;
    ElementReference fileDropContainer;
    LiteFileInfo<string> Image300_200 = EditorPublisher.InfoDB.GetStorage<string>("Images", "ImageCollection").FindById("$/300_200.image");
    private async Task UploadImage3_2()
    {
        var FileResult = await FileDialog.OpenImageFile();

        if (FileResult.ContentType == "image/png")
        {
            // Gets a FileStorage with the default collections
            var fs = EditorPublisher.InfoDB.GetStorage<string>("Images", "ImageCollection");
            // Upload a file from a Stream

            Image300_200 = fs.Upload($"$/300_200.image", FileResult.FullPath);
        }
    }
    async Task MakeGamePack()
    {
        var folderPicker = new FolderPicker();
        var hwnd = ((MauiWinUIWindow)App.Current.Windows[0].Handler.PlatformView).WindowHandle;

        // Associate the HWND with the file picker
        WinRT.Interop.InitializeWithWindow.Initialize(folderPicker, hwnd);
        var result = await folderPicker.PickSingleFolderAsync();
        GamePacker.WriteFolderToDb(result.Path);
        GamePacker.GameDB.Dispose();
        GamePacker.SplitFile(GamePacker.GameDBPath, FileDialog.Path);
        GamePacker.GameDB = new LiteDatabase(GamePacker.GameDBPath);
    }

    async Task Back()
    {
       NavigationManager.NavigateTo("", false);
    }
}
